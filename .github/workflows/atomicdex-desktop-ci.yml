name: AtomicDex-Desktop CI

on:
  pull_request:
    types: [ opened, synchronize, reopened ]
  push:
    branches:
      - master
  schedule:
    - cron: '0 0 * * 1'

jobs:

  ci-flow:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        name: [
            ubuntu-qt-5-15-2,
            osx-qt-5-15-2,
            windows-10-qt-5-15-2
        ]

        include:
          - name: ubuntu-qt-5-15-2
            os: ubuntu-16.04
            qt: '5.15.2'

          - name: osx-qt-5-15-2
            os: macos-latest
            qt: '5.15.2'

          - name: windows-10-qt-5-15-2
            os: windows-latest
            qt: '5.15.2'

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: 'true'


      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      #- name: setup rdp (Windows)
      #  if: runner.os == 'Windows'
      #  env:
      #    NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      #  run: |
      #    Invoke-WebRequest https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip -OutFile ngrok.zip
      #    Expand-Archive ngrok.zip
      #    .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      #    Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0
      #    Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
      #    Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
      #    Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)

      - name: Install QT (Linux)
        if: runner.os == 'Linux'
        uses: KomodoPlatform/install-qt-action@v2.9.0
        with:
          version: ${{ matrix.qt }}
          host: 'linux'
          target: 'desktop'
          dir: '${{ github.workspace }}'
          modules: 'qtcharts qtwidgets debug_info qtwebengine qtwebview'
          aqtversion: '==0.8'
          py7zrversion: '==0.6'

      - name: Install QT (MacOS)
        if: runner.os == 'macOS'
        uses: KomodoPlatform/install-qt-action@v2.9.0
        with:
          version: ${{ matrix.qt }}
          host: 'mac'
          target: 'desktop'
          dir: '${{ github.workspace }}'
          modules: 'qtcharts qtwidgets debug_info qtwebview qtwebengine'

      - name: Install QT IFW (MacOS)
        if: runner.os == 'macOS'
        run: |
          python3  -m aqt tool mac tools_ifw 4.0 qt.tools.ifw.40 --outputdir ${{ github.workspace }}/Qt
          echo "${{ github.workspace }}/Qt/Tools/QtInstallerFramework/4.0/bin" >> $GITHUB_PATH

      - name: Install QT (Windows)
        if: runner.os == 'Windows'
        uses: KomodoPlatform/install-qt-action@v2.9.0
        with:
          version: ${{ matrix.qt }}
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          dir: 'C:\'
          modules: 'qtcharts qtwidgets debug_info qtwebview qtwebengine'

      - name: Install QT IFW (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m aqt tool windows tools_ifw 4.0 qt.tools.ifw.40 --outputdir C:/Qt
          echo "C:/Qt/Tools/QtInstallerFramework/4.0/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo $env:GITHUB_PATH
          echo $env:PATH

      - name: Install nim (Linux)
        if: runner.os == 'Linux'
        run: |
          export DEBIAN_FRONTEND=noninteractive
          echo "CHOOSENIM_CHOOSE_VERSION=1.4.0" >> $GITHUB_ENV
          curl https://nim-lang.org/choosenim/init.sh > choosenim.sh
          chmod +x choosenim.sh
          ./choosenim.sh -y
          export PATH=/home/runner/.nimble/bin:$PATH

      - name: Install deps (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
          echo ${{ github.sha }}
          sudo ./ci_tools_atomic_dex/ci_scripts/linux_script.sh

      - name: Upload env variable for vpkg (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "CXXFLAGS=-stdlib=libc++" >> $GITHUB_ENV
          echo "LDFLAGS=-stdlib=libc++" >> $GITHUB_ENV
          echo "CXX=clang++-11" >> $GITHUB_ENV
          echo "CC=clang-11" >> $GITHUB_ENV

      - name: vcpkg deps (Linux)
        if: runner.os == 'Linux'
        uses: KomodoPlatform/run-vcpkg@v5
        with:
          vcpkgArguments: '@${{ github.workspace }}/.github/workflows/linux_response_file.txt --overlay-ports=${{ github.workspace }}/ci_tools_atomic_dex/vcpkg-custom-ports/ports'
          vcpkgDirectory: '${{ github.workspace }}/ci_tools_atomic_dex/vcpkg-repo'
          appendedCacheKey: ${{ hashFiles('.github/workflows/linux_response_file.txt') }}

      - name: Install deps (MacOS)
        if: runner.os == 'macOS'
        run: |
          ./ci_tools_atomic_dex/ci_scripts/osx_script.sh

      - name: Upload env variable for vpkg (Linux)
        if: runner.os == 'macOS'
        run: |
          echo "CXX=/usr/local/opt/llvm@9/bin/clang++" >> $GITHUB_ENV
          echo "CC=/usr/local/opt/llvm@9/bin/clang" >> $GITHUB_ENV

      - name: vcpkg deps (MacOS)
        if: runner.os == 'macOS'
        uses: KomodoPlatform/run-vcpkg@v5
        with:
          vcpkgArguments: '@${{ github.workspace }}/.github/workflows/osx_response_file.txt --overlay-ports=${{ github.workspace }}/ci_tools_atomic_dex/vcpkg-custom-ports/ports'
          vcpkgDirectory: '${{ github.workspace }}/ci_tools_atomic_dex/vcpkg-repo'
          appendedCacheKey: ${{ hashFiles('.github/workflows/osx_response_file.txt') }}

      - name: vcpkg deps (Windows)
        if: runner.os == 'Windows'
        uses: KomodoPlatform/run-vcpkg@v5
        with:
          vcpkgArguments: '@${{ github.workspace }}/.github/workflows/windows_response_file.txt --overlay-ports=${{ github.workspace }}/ci_tools_atomic_dex/vcpkg-custom-ports/ports'
          vcpkgDirectory: '${{ github.workspace }}/ci_tools_atomic_dex/vcpkg-repo'
          appendedCacheKey: ${{ hashFiles('.github/workflows/windows_response_file.txt') }}

      - name: Build AtomicDEX (Linux)
        if: runner.os == 'Linux'
        run: |
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/${{ matrix.qt }}/gcc_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/${{ matrix.qt }}
          export PATH=${{ github.workspace }}/Qt/${{ matrix.qt }}/gcc_64/bin:$PATH
          export PATH=$HOME/.nimble/bin:$PATH
          export CXXFLAGS=-stdlib=libc++
          export LDFLAGS=-stdlib=libc++
          export CXX=clang++-11
          export CC=clang-11
          cd ci_tools_atomic_dex
          nimble build -y

          ./ci_tools_atomic_dex build release
          ./ci_tools_atomic_dex bundle release

      - name: Build AtomicDEX (MacOS)
        if: runner.os == 'macOS'
        run: |
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/${{ matrix.qt }}/clang_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/${{ matrix.qt }}
          cd ci_tools_atomic_dex
          nimble build -y
          ./ci_tools_atomic_dex bundle release --osx_sdk=$HOME/sdk/MacOSX10.14.sdk --compiler=clang++

      #- name: launch rdp (Windows)
      #  if: runner.os == 'Windows'
      #  run: .\ngrok\ngrok.exe tcp 3389

      - name: Build AtomicDEX (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $Env:QT_VERSION = "${{ matrix.qt }}"
          .\ci_tools_atomic_dex\ci_scripts\windows_script.ps1

      - name: Running Tests (Linux)
        working-directory: ci_tools_atomic_dex
        if: runner.os == 'Linux'
        run: |
          export REPORT_CI_TOKEN=${{ secrets.REPORT_CI_TOKEN_SECRET }}
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/${{ matrix.qt }}/gcc_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/${{ matrix.qt }}
          export PATH=${{ github.workspace }}/Qt/${{ matrix.qt }}/gcc_64/bin:$PATH
          export PATH=$HOME/.nimble/bin:$PATH
          export CXXFLAGS=-stdlib=libc++
          export LDFLAGS=-stdlib=libc++
          export CXX=clang++-11
          export CC=clang-11
          echo "Running tests"
          ./ci_tools_atomic_dex tests release
          cd build-Release/bin/AntaraAtomicDexTestsAppDir/usr/bin
          cat atomic-dex-tests-result.xml
          curl https://report.ci/upload.py --output upload.py
          ls
          python upload.py --sha `git rev-parse HEAD` -n "[Doctest Linux]" --include='atomic-dex-tests-result.xml' --framework=doctest --merge ".*"
          echo "Uploading tests on Linux finished"

      - name: Running Tests (MacOS)
        working-directory: ci_tools_atomic_dex
        if: runner.os == 'macOS'
        run: |
          export REPORT_CI_TOKEN=${{ secrets.REPORT_CI_TOKEN_SECRET }}
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/${{ matrix.qt }}/clang_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/${{ matrix.qt }}
          echo "Running tests"
          ./ci_tools_atomic_dex tests release
          cd build-Release/bin/atomicdex-desktop_tests.app/Contents/MacOS
          cat atomic-dex-tests-result.xml
          curl https://report.ci/upload.py --output upload.py
          ls
          python upload.py --sha `git rev-parse HEAD` -n "[Doctest MacOS]" --include='atomic-dex-tests-result.xml' --framework=doctest --merge ".*"
          echo "Uploading tests on OSX finished"

      - name: Running Tests (Windows)
        shell: powershell
        working-directory: ci_tools_atomic_dex
        if: runner.os == 'Windows'
        run: |
          echo "Running tests"
          $Env:REPORT_CI_TOKEN = "${{ secrets.REPORT_CI_TOKEN_SECRET }}"
          $Env:QT_INSTALL_CMAKE_PATH = "C:\Qt\${{ matrix.qt }}\msvc2019_64"
          cmd /c '.\ci_tools_atomic_dex.exe tests release 2>&1'
          cd build-Release
          cd bin
          ls
          Invoke-WebRequest -Uri https://report.ci/upload.py -OutFile upload.py
          python upload.py --sha $(git rev-parse HEAD) -n "[Doctest Windows]" --include='atomic-dex-tests-result.xml' --framework=doctest --merge ".*"

      - name: Upload env variable for artifacts (Linux)
        if: runner.os == 'Linux'
        run: |
          ls ./bundled/linux/
          echo "artifact_name_zstd=atomicdex-desktop-${{ matrix.name }}-$(git rev-parse --short HEAD).tar.zst" >> $GITHUB_ENV
          echo "artifact_name_zip=atomicdex-desktop-${{ matrix.name }}-$(git rev-parse --short HEAD).zip" >> $GITHUB_ENV
          echo "artifact_name_appimage=atomicdex-desktop-${{ matrix.name }}-$(git rev-parse --short HEAD)-x86_64.AppImage" >> $GITHUB_ENV
          echo "target_name_zstd=atomicdex-desktop-linux-$(git rev-parse --short HEAD).tar.zst" >> $GITHUB_ENV
          echo "target_name_zip=atomicdex-desktop-linux-$(git rev-parse --short HEAD).zip" >> $GITHUB_ENV
          echo "target_name_appimage=atomicdex-desktop-$(git rev-parse --short HEAD)-x86_64.AppImage" >> $GITHUB_ENV

      - name: Upload bundle artifact (Linux ZSTD)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact_name_zstd }}
          path: ./bundled/linux/${{ env.target_name_zstd }}

      - name: Upload bundle artifact (Linux ZIP)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact_name_zip }}
          path: ./bundled/linux/${{ env.target_name_zip }}

      - name: Upload bundle artifact (Linux AppImage)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact_name_appimage }}
          path: ./bundled/linux/${{ env.target_name_appimage }}

      - name: Upload env variable for artifacts (macOS)
        if: runner.os == 'macOS'
        run: |
          ls ./bundled/osx/
          echo "artifact_name_dmg=atomicdex-desktop-${{ matrix.name }}-$(git rev-parse --short HEAD).dmg" >> $GITHUB_ENV
          echo "artifact_name_installer=atomicdex-desktop-installer-${{ matrix.name }}-$(git rev-parse --short HEAD).7z" >> $GITHUB_ENV

      - name: Upload artifacts (MacOS dmg)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact_name_dmg }}
          path: ./bundled/osx/atomicdex-desktop.dmg

      - name: Upload artifacts (MacOS installer)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact_name_installer }}
          path: ./bundled/osx/atomicdex_desktop_installer.7z

      - name: Upload env variable for artifacts (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "on_windows"
          echo "artifact_name_zip=atomicdex-desktop-${{ matrix.name }}-$(git rev-parse --short HEAD).zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "artifact_name_installer=atomicdex-desktop-installer-${{ matrix.name }}-$(git rev-parse --short HEAD).exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload artifacts (Windows zip)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact_name_zip }}
          path: ./bundled/windows/bin.zip

      - name: Upload artifacts (Windows installer)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact_name_installer }}
          path: ./bundled/windows/atomicdex_desktop_installer.exe
      
      
